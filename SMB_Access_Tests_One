Checks if the provided account can access port 445 on the defined hosts.

$computers = @( "Add-Computer-Name", "Add-Computer-Name"  )
$username = "ADD-USERNAME"
$password = "ADD-PASSWORD"
$domain = "ADD-DOMAIN"

foreach ($computer in $computers) {
    $credential = New-Object System.Management.Automation.PSCredential ($username, $(ConvertTo-SecureString -AsPlainText -Force $password))
    $scriptBlock = {
        Param ($username, $password)
        Try {
            $smb = Get-SmbSession
            Write-Output "SMB service is accessible on $($env:COMPUTERNAME)"
        } Catch {
            Write-Output "Failed to authenticate against SMB service on $($env:COMPUTERNAME)"
        }
    }
    Invoke-Command -ComputerName $computer -Credential $credential -ScriptBlock $scriptBlock -ArgumentList $username, $password
}

-----------------------

Same as above but with Get-Credential

$computers = @( "Add-Computer-Name", "Add-Computer-Name" )
$credential = Get-Credential
$username = $credential.UserName
$password = $credential.Password
$domain = "Add-Domain"

foreach ($computer in $computers) {
    $scriptBlock = {
        Try {
            $smb = Get-SmbSession
            Write-Output "SMB service is accessible on $($env:COMPUTERNAME)"
        } Catch {
            Write-Output "Failed to authenticate against SMB service on $($env:COMPUTERNAME)"
        }
    }
    Invoke-Command -ComputerName $computer -Credential $credential -ScriptBlock $scriptBlock
}

------------------------

Credentials with SMB Automated Host List

$domain = "Add-Domain"
$computers = ([adsisearcher]"(&(objectCategory=computer)(operatingSystem=*Windows*))").FindAll().Properties.name | ForEach-Object { $_.ToUpper() }
$username = Read-Host "Enter username"
$password = Read-Host "Enter password" -AsSecureString
$credential = New-Object System.Management.Automation.PSCredential ($username, $password)

foreach ($computer in $computers) {
    $scriptBlock = {
        Try {
            $smb = Get-SmbSession
            Write-Output "SMB service is accessible on $($env:COMPUTERNAME)"
        } Catch {
            Write-Output "Failed to authenticate against SMB service on $($env:COMPUTERNAME)"
        }
    }
    Invoke-Command -ComputerName $computer -Credential $credential -ScriptBlock $scriptBlock
}

------------------------

Output in green

$searcher = New-Object System.DirectoryServices.DirectorySearcher
$searcher.Filter = "(&(objectClass=computer)(operatingSystem=*Windows*))"

$computers = $searcher.FindAll() | ForEach-Object {
    $_.Properties.name[0]
}

$username = Read-Host "Enter username"
$password = Read-Host "Enter password" -AsSecureString
$credential = New-Object System.Management.Automation.PSCredential ($username, $password)

foreach ($computer in $computers) {
    $scriptBlock = {
        Try {
            $smb = Get-SmbSession
            Write-Host "SMB service is accessible on $($env:COMPUTERNAME)" -ForegroundColor Green
        } Catch {
            Write-Host "Failed to authenticate against SMB service on $($env:COMPUTERNAME)"
        }
    }
    Invoke-Command -ComputerName $computer -Credential $credential -ScriptBlock $scriptBlock
}


--------------------

Same as above but does not return any failed attempts.

$computers = @((New-Object DirectoryServices.DirectorySearcher("(&(objectCategory=computer)(operatingSystem=Windows*))")).FindAll() | ForEach-Object { $_.Properties.name[0] })

$username = Read-Host -Prompt "Enter your username"
$password = Read-Host -Prompt "Enter your password" -AsSecureString
$credential = New-Object System.Management.Automation.PSCredential ($username, $password)

$computers | ForEach-Object {
    $computer = $_
    $scriptBlock = {
        Try {
            $smb = Get-SmbSession
            Write-Host "SMB service is accessible on $($env:COMPUTERNAME)" -ForegroundColor Green
        } Catch {
            $error_message = $_.Exception.Message
            if ($error_message -notlike "*The user name or password is incorrect.*") {
                Write-Host $error_message -ForegroundColor Red
            }
        }
    }
    Invoke-Command -ComputerName $computer -Credential $credential -ScriptBlock $scriptBlock -ErrorAction SilentlyContinue
}
